build_and_run_webrtc_stretch() {
    # build code again
    echo "building webrtc code"
    APP_DIRECTORY=/home/hello-robot/catkin_ws/src/stretch_robomaker/stretch_kvs_streaming
    mkdir $APP_DIRECTORY/amazon-kinesis-video-streams-webrtc-sdk-c/build
    cd $APP_DIRECTORY/amazon-kinesis-video-streams-webrtc-sdk-c/build
    cmake ..
    make

    export AWS_KVS_LOG_LEVEL=3

    # run the binary
    echo "launching webrtc app"
    cd $APP_DIRECTORY/amazon-kinesis-video-streams-webrtc-sdk-c/build/samples

    echo "create signalling channel, in case it doesnt exist"
    aws kinesisvideo create-signaling-channel --channel-name robot_webrtc_stream
    sleep 3
    ./kvsWebrtcClientMasterGstSample robot_webrtc_stream
}


run_kinesis_stream_stretch() {
    # set env vars to recognize the kvs plugin
    APP_DIRECTORY=/home/hello-robot/catkin_ws/src/stretch_robomaker/stretch_kvs_streaming
    export GST_PLUGIN_PATH=$GST_PLUGIN_PATH:$APP_DIRECTORY/amazon-kinesis-video-streams-producer-sdk-cpp/build
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$APP_DIRECTORY/amazon-kinesis-video-streams-producer-sdk-cpp/open-source/local/lib

    export AWS_KVS_LOG_LEVEL=3

    # Make create stream api everytime for simplicity. It just fails if it already exists.
    echo "Creating a new stream if it doesnt exist"
    aws kinesisvideo create-stream --stream-name "robot_kvs_stream_local_computer" --data-retention-in-hours "120"
    sleep 3
    echo "setting up kvs streaming"
    gst-launch-1.0 -v rtspsrc location=rtsp://0.0.0.0:8554/back drop-on-latency=true use-pipeline-clock=true do-retransmission=false latency=0 ! rtph264depay ! h264parse ! kvssink stream-name="robot_kvs_stream_local_computer" storage-size=512 aws-region=$AWS_REGION
}


# Pull creds from .aws/credentials/default
creds_from_default_file_stretch() {
    export AWS_ACCESS_KEY_ID= your_access_key_id
    export AWS_SECRET_ACCESS_KEY= your_secret_access_key
    export AWS_DEFAULT_REGION= your_default_region
}
